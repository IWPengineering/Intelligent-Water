#define RTCC_WRITE   0xDE
#define RTCC_READ    0xDF
#define RTCC_SECOND  0x00
#define RTCC_MINUTE  0x01
#define RTCC_HOUR    0x02
#define RTCC_WEEKDAY 0x03
#define RTCC_DAY     0x04
#define RTCC_MONTH   0x05
#define RTCC_YEAR    0x06

void I2CtoInternalRTCC(void);
void BeginSequentialReadI2C(char address);
char SequentialReadI2C(void);
void IdleI2C(void);
void StartI2C(void);
void StopI2C(void);
void RestartI2C(void);
void NackI2C(void);
void AckI2C(void);
void WriteI2C(unsigned char byte);
unsigned int ReadI2C (void);
char ReadI2CRegister(char address);
void setI2CTime(unsigned char year, unsigned char month, unsigned char day,
        unsigned char hour, unsigned char minute, unsigned char second);
void readI2CTime(unsigned char* year, unsigned char* month, unsigned char* day,
        unsigned char* hour, unsigned char* minute, unsigned char* second);
void setInternalTimeBCD(unsigned char year, unsigned char month, unsigned char day,
		unsigned char hour, unsigned char minute, unsigned char second);

void I2CtoInternalRTCC(void) {
    unsigned char year, month, day, hour, minute, second;
    readI2CTime(&year, &month, &day, &hour, &minute, &second);
    setInternalTimeBCD(year, month, day, hour, minute, second);
}

// Set up sequential read from MCP7940, starting at given address
void BeginSequentialReadI2C(char address) {
    StartI2C();
    WriteI2C(RTCC_WRITE);        // Enter Write Mode
    WriteI2C(address);           // Beginning address for reading
    IdleI2C();
    RestartI2C();
    WriteI2C(RTCC_READ);         // Enter Read Mode
    while(I2C1STATbits.ACKSTAT); // Wait for ACK from slave
}

// Read next register
char SequentialReadI2C(void) {
    while (I2C1STATbits.TRSTAT); // Wait for bus to be idle
    I2C1CONbits.RCEN = 1;        // Gives control of clock to Slave device
    while(!I2C1STATbits.RBF);    // Waits for register to fill up
    AckI2C();                    // Ask for next byte
    return I2C1RCV;              // Returns data
}

// Read RTCC registers sequentially (fast)
void readI2CTime(unsigned char* year, unsigned char* month, unsigned char* day,
        unsigned char* hour, unsigned char* minute, unsigned char* second) {

    BeginSequentialReadI2C(RTCC_SECOND);

    char BCDSecond = SequentialReadI2C() & 0x7F; // Get Second
    char BCDMinute = SequentialReadI2C() & 0x7F; // Get Minute
    char BCDHour   = SequentialReadI2C() & 0x1F; // Get Hour
                     SequentialReadI2C();        // Discard Weekday
    char BCDDay    = SequentialReadI2C() & 0x3F; // Get Day
    char BCDMonth  = SequentialReadI2C() & 0x1F; // Get Month
    char BCDYear   = SequentialReadI2C();        // Get Year

    StopI2C();

    *year   = BcdToDec(BCDYear);
    *month  = BcdToDec(BCDMonth);
    *day    = BcdToDec(BCDDay);
    *hour   = BcdToDec(BCDHour);
    *minute = BcdToDec(BCDMinute);
    *second = BcdToDec(BCDSecond);

}

// Set I2C clock using decimal values provided
void setI2CTime(unsigned char year, unsigned char month, unsigned char day,
        unsigned char hour, unsigned char minute, unsigned char second) {

    char BCDSecond = DecToBcd(second),
         BCDMinute = DecToBcd(minute),
         BCDHour   = DecToBcd(hour) & 0x3F, // 24-hour time
         BCDDay    = DecToBcd(day),
         BCDMonth  = DecToBcd(month),
         BCDYear   = DecToBcd(year);

    if (year % 4)
        BCDMonth &= 0x1F;     // Is not leap year
    else
        BCDMonth |= 0x20;     // Is leap year

    // Disable Oscillator
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_SECOND);    // Set address to seconds
    WriteI2C(0x00);           // Disable oscillator and set seconds to 0
    IdleI2C();
    StopI2C();
    
    // Set Time
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_MINUTE);    // Set address to minutes
    WriteI2C(BCDMinute);      // Send Minute
    WriteI2C(BCDHour);        // Send Hour
    WriteI2C(0x08);           // Enable battery operation and set weekday to zero
    WriteI2C(BCDDay);         // Send Date
    WriteI2C(BCDMonth);       // Send Month
    WriteI2C(BCDYear);        // Send Year
    IdleI2C();
    StopI2C();

    // Enable Oscillator
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_SECOND);    // Set address to seconds
    WriteI2C(0x80|BCDSecond); // Enable oscillator and set seconds
    IdleI2C();
    StopI2C();

}

// Start RTCC in case it was stopped (dead or missing battery)
void startClock(void) {
    // Preserve seconds value in case RTCC was already running
    char BCDSecond = ReadI2CRegister(RTCC_SECOND) & 0x7F;

    // Disable Oscillator
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_SECOND);    // Set address to seconds
    WriteI2C(0x00);           // Disable oscillator and set seconds to 0
    IdleI2C();
    StopI2C();

    // Set Time
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_WEEKDAY);   // Set address to weekday
    WriteI2C(0x08);           // Enable battery operation and set weekday to zero
    IdleI2C();
    StopI2C();

    // Enable Oscillator
    StartI2C();
    WriteI2C(RTCC_WRITE);     // Device Address (RTCC) + Write Command
    WriteI2C(RTCC_SECOND);    // Set address to seconds
    WriteI2C(0x80|BCDSecond); // Enable oscillator and restore seconds
    IdleI2C();
    StopI2C();
}

// Read one byte from given memory address
char ReadI2CRegister(char address) {
    StartI2C();
    WriteI2C(RTCC_WRITE); // Enter Write Mode
    WriteI2C(address);    // Set address for reading
    IdleI2C();
    RestartI2C();
    WriteI2C(RTCC_READ);  // Enter Read Mode
    char returnValue = ReadI2C();
    StopI2C();

    return returnValue;
}

// Wait for bus to be idle
void IdleI2C(void) {
    while (I2C1STATbits.TRSTAT);
}

// Generate an I2C start condition
void StartI2C(void) {
    I2C1CONbits.SEN = 1;        // Generate start condition
    while (I2C1CONbits.SEN);    // Wait for start
    //return(I2C1STATbits.S);   // Optional - return status
}

// Generate an I2C stop condition
void StopI2C(void) {
    I2C1CONbits.PEN = 1;        // Generate stop condition
    while (I2C1CONbits.PEN);    // Wait for stop
    //return(I2C1STATbits.P);   // Optional - return status
}

// Generate an I2C restart condition
void RestartI2C(void) {
    I2C1CONbits.RSEN = 1;       // Generate restart
    while (I2C1CONbits.RSEN);   // Wait for restart
    //return(I2C1STATbits.S);   // Optional - return status
}

// Generate an I2C not acknowledge condition
void NackI2C(void) {
    I2C1CONbits.ACKDT = 1;
    I2C1CONbits.ACKEN = 1;
    while(I2C1CONbits.ACKEN);
}

// Generate an I2C acknowledge condition
void AckI2C(void) {
    I2C1CONbits.ACKDT = 0;
    I2C1CONbits.ACKEN = 1;
    while(I2C1CONbits.ACKEN);
}

// Set up I2C module
void initI2C(void) {
    I2C1CONbits.A10M = 0;   // Use 7-bit slave addresses
    I2C1CONbits.DISSLW = 1; // Disable Slew rate control
    I2C1CONbits.IPMIEN = 0; // should be set to 0 when master
    //IFS1bits.MI2C1IF = 0; // Disable Interupt

    I2C1BRG = 0x4E;         // If Fcy = 8 Mhz this will set the baud to 100 khz
    I2C1CONbits.I2CEN = 1;  // Configures I2C pins as I2C (on pins 17 an 18)
}

// Transmit one byte
void WriteI2C(unsigned char byte) {
    while (I2C1STATbits.TRSTAT); // Wait for bus to be idle
    I2C1TRN = byte;              // Load byte to I2C1 Transmit buffer
    while (I2C1STATbits.TBF);	 // Wait for data transmission
}

// Read one byte from bus
unsigned int ReadI2C (void) {
    while (I2C1STATbits.TRSTAT); // Wait for bus to be idle
    I2C1CONbits.ACKDT = 1;       // Prepares to send NACK
    I2C1CONbits.RCEN = 1;        // Gives control of clock to Slave device
    while(!I2C1STATbits.RBF);    // Waits for register to fill up
    I2C1CONbits.ACKEN = 1;       // Sends NACK or ACK set above
    while(I2C1CONbits.ACKEN);    // Waits till ACK is sent (hardware reset)
    return I2C1RCV;              // Returns data
}

// Set internal RTCC using BCD values provided
void setInternalTimeBCD(unsigned char year, unsigned char month, unsigned char day,
		unsigned char hour, unsigned char minute, unsigned char second) {

    _RTCEN = 0; // Disable clock

    // Enable write to RTCC, sets RTCWEN
    __builtin_write_RTCWEN();

    _RTCPTR = 0b11;                          // decrements with read or write
    RTCVAL = year;                           // set year
    RTCVAL = (((int) month) << 8) + day;     // set month, day
    RTCVAL = hour;                           // clear weekday, set hour
    RTCVAL = (((int) minute) << 8) + second; // set minute, second

    _RTCEN = 1;   // Enable clock

    _RTCWREN = 0; // Disable writing
}

char BcdToDec(char val) {
    return (val / 16 * 10) + (val % 16);
}

char DecToBcd(char val) {
    return (val / 10 * 16) + (val % 10);
}
